@require: zrbase/zmtdoc0
@require: base/string
@require: base/option-ext

@import: ../src/sexp
@import: ../src/std-atom

@import: log

let atom = SExp-StdAtom.atom

let s1 = SExp.of-atom (SExp-StdAtom.of-symbol `symbol`)
let _ = info-value `s1` (SExp.to-string atom s1)

let s2 = SExp.of-atom (SExp-StdAtom.of-symbol `symbol-2`)
let s3 = SExp.of-atom (SExp-StdAtom.of-symbol `symbol-3`)
let s4 = SExp.(of-list [s1; of-list [s2; s2; s3]])
let _ = info-value `s4` (SExp.to-string atom s4)

let s5 = `(this (is an) (s-expression))` |> SExp.read-from-string atom
let _ = (
  let s = Option.unwrap s5 in
  info-value `s5` (SExp.to-string atom s)
)
let s6 = `(this (is not) (an s-expression` |> SExp.read-from-string atom
let _ = Option.unwrap-none s6

let s7 = SExp.of-atom (SExp-StdAtom.of-string `some string`)
let _ = info-value `s7` (SExp.to-string atom s7)

let s8 = SExp.of-atom (SExp-StdAtom.of-string `string containing "escape \ characters"`)
let _ = info-value `s8` (SExp.to-string atom s8)

let s9 = SExp.(of-list [s2; s7; s8; of-list []])
let _ = info-value `s9` (SExp.to-string atom s9)

let s10 = `(this (is an) (s-expression with "string") "and \"string\"")` |> SExp.read-from-string atom
let _ = (
  let s = Option.unwrap s10 in
  info-value `s10` (SExp.to-string atom s)
)

let s11 = SExp.of-atom (SExp-StdAtom.of-int 2)
let _ = info-value `s11` (SExp.to-string atom s11)

let s12 = SExp.of-atom (SExp-StdAtom.of-int (-21))
let _ = info-value `s12` (SExp.to-string atom s12)

let s13 = `(this (is an) (s-expression with 334) int -512)` |> SExp.read-from-string atom
let _ = (
  let s = Option.unwrap s13 in
  info-value `s13` (SExp.to-string atom s)
)

let s14 = `-` |> SExp.read-from-string atom
let _ = Option.unwrap-none s14

let convert-test x = (
  SExp.(to-string atom x |> String.to-list |> read atom)
  |> Option.map-or false (fun (y, ch-l) -> (
    Eq.equal (SExp.eq SExp-StdAtom.eq) y x
    && Eq.equal (List.eq Char.eq) ch-l []
  ))
)

let s15 = SExp.(
  of-list [
    of-atom (SExp-StdAtom.of-symbol `this`);
    of-list [
      of-atom (SExp-StdAtom.of-string `is`);
      of-atom (SExp-StdAtom.of-int (-1));
    ];
    of-list [
      of-atom (SExp-StdAtom.of-symbol `s-expression`);
      of-list [
        of-atom (SExp-StdAtom.of-int 34029);
        of-list [
        ];
      ];
    ];
  ]
)
let _ = info-value `convert-test s15` (show-bool (convert-test s15))

in

document ()
