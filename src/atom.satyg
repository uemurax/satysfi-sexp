@require: base/base
@require: base/char
@require: base/eq
@require: base/string
@require: base/list-ext
@require: base/option-ext

module SExp-Atom : sig

type 'a t

% `read (String.to-list (to-string x))` is required to be `Some (x, [])`
val make : (|
  to-string : 'a -> string;
  read : Char.t list -> ('a * Char.t list) option;
|) -> 'a t
val to-string : ('a t) implicit -> 'a -> string
val read : ('a t) implicit -> Char.t list -> ('a * Char.t list) option

% Test if `read (String.to-list (to-string x)) == Some (x, [])`
val test : ('a t) implicit -> ('a Eq.t) implicit -> 'a -> bool

end = struct

type char = Char.t
type 'a t = (|
  to-string : 'a -> string;
  read : char list -> ('a * char list) option;
|)

let make rec = rec
let to-string atom = atom#to-string
let read atom = atom#read

let test atom eq x =
to-string atom x
|> String.to-list
|> read atom
|> Option.map-or false (fun (y, ch-l) -> (
  Eq.equal eq y x
  && Eq.equal (List.eq Char.eq) ch-l []
))

end
